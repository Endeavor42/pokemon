{"version":3,"sources":["components/context/DataContext.jsx","components/pokemodal/Combat.jsx","components/pokemodal/Image.jsx","components/PokeModal.jsx","App.js","index.js"],"names":["DataContext","createContext","Combat","useContext","storeCard","useEffect","stats","map","skills","index","className","key","uuid","stat","name","ProgressBar","variant","now","base_stat","label","ImageModal","card","Tooltip","placement","arrow","disableFocusListener","disableTouchListener","title","src","alt","PokeModal","reveal","close","moves","id","filter","move","Modal","show","size","onHide","centered","Header","closeButton","Title","Body","Footer","Button","onClick","App","useState","pokedex","setPokedex","wildPokemon","setWildPokemon","setStoreCard","encounterWildPokemon","loading","setLoading","axios","get","min","Math","ceil","max","floor","random","pokeId","then","response","data","setShow","Spinner","animation","pokemon","state","p","length","sort","a","b","console","log","handleShow","e","stopPropagation","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d050b46.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const DataContext = createContext(null);\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { DataContext } from \"../context/DataContext\";\r\nimport { ProgressBar } from \"react-bootstrap\";\r\nimport uuid from \"uuid\";\r\n\r\nexport default function Combat() {\r\n  const [storeCard] = useContext(DataContext);\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  return (\r\n    <>\r\n      {storeCard.stats.map((skills, index) => (\r\n        <div className=\"skills_container\" key={uuid()}>\r\n          <p className=\"skills\" key={uuid()}>\r\n            {skills.stat.name}\r\n          </p>\r\n          <ProgressBar\r\n            key={uuid()}\r\n            variant=\"length\"\r\n            now={storeCard.stats[index].base_stat}\r\n            label={`${storeCard.stats[index].base_stat}`}\r\n          />\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { ClickAwayListener, Tooltip, Button } from \"@material-ui/core\";\r\n\r\nexport default function ImageModal({ card }) {\r\n  //   const [open, setOpen] = React.useState(false);\r\n\r\n  //   const handleTooltipClose = () => {\r\n  //     setOpen(false);\r\n  //   };\r\n\r\n  //   const handleTooltipOpen = () => {\r\n  //     setOpen(true);\r\n  //   };\r\n  return (\r\n    <div className=\"item1\">\r\n      <Tooltip\r\n        placement=\"top\"\r\n        arrow\r\n        disableFocusListener\r\n        disableTouchListener\r\n        title={`${card.name}!`}\r\n      >\r\n        <img\r\n          src={\r\n            \"https://img.pokemondb.net/sprites/black-white/anim/normal/\" +\r\n            card.name +\r\n            \".gif\"\r\n          }\r\n          className=\"sprite\"\r\n          alt=\"\"\r\n        />\r\n      </Tooltip>\r\n      {/* <ClickAwayListener onClickAway={handleTooltipClose}>\r\n        <Tooltip\r\n          placement=\"top\"\r\n          PopperProps={{\r\n            disablePortal: true\r\n          }}\r\n          onClose={handleTooltipClose}\r\n          open={open}\r\n          disableFocusListener\r\n          disableHoverListener\r\n          disableTouchListener\r\n          title={`${card.name}!`}\r\n          arrow\r\n        >\r\n          <img\r\n            onClick={handleTooltipOpen}\r\n            src={\r\n              \"https://img.pokemondb.net/sprites/black-white/anim/normal/\" +\r\n              card.name +\r\n              \".gif\"\r\n            }\r\n            className=\"sprite\"\r\n            alt=\"\"\r\n          />\r\n        </Tooltip>\r\n      </ClickAwayListener> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Modal, Button, ProgressBar } from \"react-bootstrap\";\r\nimport uuid from \"uuid\";\r\nimport Combat from \"./pokemodal/Combat\";\r\nimport { DataContext } from \"./context/DataContext\";\r\nimport ImageModal from \"./pokemodal/Image\";\r\n\r\nexport default function PokeModal({ reveal, close, card }) {\r\n  const { moves } = card;\r\n  let [storeCard] = useContext(DataContext);\r\n\r\n  let storeMoves;\r\n\r\n  useEffect(() => {\r\n    // statistics && console.log(storeCard);\r\n  }, [storeCard]);\r\n\r\n  // NOTES: we keep changing the state, which causes re-rendering\r\n  if (card.id) {\r\n    storeMoves = moves\r\n      .filter((move, index) => index < 3)\r\n      .map((move, index) => <li key={uuid()}>{move.move.name}</li>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={reveal} size=\"lg\" onHide={close} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            <img\r\n              src={\"https://img.pokemondb.net/sprites/items/master-ball.png\"}\r\n              alt=\"\"\r\n            />\r\n            <p>\r\n              #{card.id} - {card.name}\r\n            </p>\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"grid-container\">\r\n          <ImageModal card={card} />\r\n\r\n          <div className=\"item2\">\r\n            <Combat />\r\n          </div>\r\n\r\n          <div className=\"item4\">details</div>\r\n          <div className=\"item5\">profile-left</div>\r\n          <div className=\"item6\">profile-right</div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" onClick={close}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\n// Use the id to fetch the image and data\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport PokeModal from \"./components/PokeModal\";\r\n// import PokeBerry from \"./components/PokeBerry\";\r\nimport { DataContext } from \"./components/context/DataContext\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  const [pokedex, setPokedex] = useState([]);\r\n  const [wildPokemon, setWildPokemon] = useState({});\r\n  const [storeCard, setStoreCard] = useState({});\r\n\r\n  // const [wildBerry, setWildBerry] = useState({}); // ---\r\n\r\n  useEffect(() => {\r\n    encounterWildPokemon();\r\n    // berries();\r\n  }, []);\r\n\r\n  const pokeId = () => {\r\n    const min = Math.ceil(400);\r\n    const max = Math.floor(480);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const encounterWildPokemon = () => {\r\n    setLoading(true);\r\n    return axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokeId()}`)\r\n      .then(response => {\r\n        // response.data && console.log(\"Received the data\");\r\n        setWildPokemon(response.data);\r\n        response.data && setLoading(false);\r\n      });\r\n  };\r\n\r\n  //wildBerry.id && console.log(wildBerry); // MISTAKE: wildBerry is still true. Must be more specific, wildberry.id\r\n\r\n  const catchPokemon = pokemon => {\r\n    setPokedex(state => {\r\n      const monExists = state.filter(p => pokemon.id === p.id).length > 0; // mostly false. Only true if you catch the same pokemon\r\n      if (!monExists) {\r\n        state = [...state, pokemon];\r\n        state.sort(function(a, b) {\r\n          return a.id - b.id;\r\n        });\r\n      }\r\n      return state;\r\n    });\r\n    encounterWildPokemon(); // MISTAKE: we have to call this function whenever we're done\r\n  };\r\n\r\n  const releasePokemon = id => {\r\n    setPokedex(state => state.filter(p => p.id !== id));\r\n  };\r\n\r\n  // PokeModal\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n\r\n  const handleShow = pokemon => {\r\n    setShow(true);\r\n    setStoreCard(pokemon);\r\n    console.log(\"retrieved card\");\r\n  };\r\n\r\n  // JSX\r\n  return loading ? (\r\n    <div className=\"loading\">\r\n      <Spinner animation=\"grow\" />\r\n    </div>\r\n  ) : (\r\n    <div className=\"app-wrapper container\">\r\n      <header>\r\n        <h1 className=\"title\">React Hooks</h1>\r\n        <h3 className=\"subtitle\">With Pokémon</h3>\r\n      </header>\r\n      <section className=\"wild-pokemon\">\r\n        <h2>Wild Encounter</h2>\r\n\r\n        <img\r\n          src={\r\n            \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\r\n            wildPokemon.id +\r\n            \".png\"\r\n          }\r\n          className=\"sprite\"\r\n          alt=\"\"\r\n        />\r\n        <h3>{wildPokemon.name}</h3>\r\n        <button className=\"catch-btn\" onClick={() => catchPokemon(wildPokemon)}>\r\n          CATCH\r\n        </button>\r\n      </section>\r\n\r\n      {/* Pokedex */}\r\n      <section className=\"pokedex\">\r\n        <h2>Pokédex</h2>\r\n        <p>Gotta catch 'em all</p>\r\n        <div className=\"pokedex-list\">\r\n          {pokedex.map(pokemon => (\r\n            <div\r\n              className=\"pokemon\"\r\n              key={pokemon.id}\r\n              onClick={() => handleShow(pokemon)}\r\n            >\r\n              <img\r\n                src={\r\n                  \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" +\r\n                  pokemon.id +\r\n                  \".png\"\r\n                }\r\n                className=\"sprite\"\r\n                alt=\"\"\r\n              />\r\n              <h3 className=\"pokemon-name\">{pokemon.name}</h3>\r\n              <button\r\n                className=\"remove\"\r\n                onClick={e => {\r\n                  releasePokemon(pokemon.id);\r\n                  e.stopPropagation();\r\n                }}\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n          ))}\r\n\r\n          <DataContext.Provider value={[storeCard]}>\r\n            <PokeModal close={handleClose} reveal={show} card={storeCard} />\r\n          </DataContext.Provider>\r\n        </div>\r\n      </section>\r\n      {/* <PokeBerry /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/main.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}